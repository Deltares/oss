import org.apache.tools.ant.filters.ReplaceTokens
import org.codehaus.groovy.runtime.GStringImpl

plugins {
  id "org.sonarqube" version "2.7.1"
  id 'net.saliman.properties' version '1.4.6'
}

project.ext {
    environment = getEnvProperty('env', 'local')
    bundleDir = getEnvProperty('liferay.workspace.home.dir', project.projectDir.toString() + '/bundles')
    liferayData = project.projectDir.toString() + '/docker/liferay/data'
    liferayMount = project.projectDir.toString() + '/docker/liferay/mount/files'
    nextcloudMount = project.projectDir.toString() + '/docker/nextcloud/config'
    dockerContainerPrefix = getEnvProperty('liferay.docker.container.prefix', 'oss')
    dockerComposeFilePath = getEnvProperty('liferay.docker.compose.path', project.projectDir.toString() + '/docker/docker-compose.yml') as Object
    deployFolder = "${bundleDir}/deploy" as GStringImpl
    dbName = getEnvProperty('dbName', 'liferay')
    dbUser = getEnvProperty('dbUser', 'liferay')
    dbPassword = getEnvProperty('dbPassword', 'liferay')
    defaultLiferayAdminPassword = getEnvProperty('default.admin.password', 'test')
    bundleDirectories = [
            file("$bundleDir/deploy"),
            file("$bundleDir/osgi/deploy"),
            file("$bundleDir/osgi/modules"),
            file("$liferayData"),
            file("$liferayMount")
    ]

    keyUrl = getEnvProperty('KEYCLOAK_URL', '')
    keyClient = getEnvProperty('KEYCLOAK_CLIENTID', '')
    keySecret = getEnvProperty('KEYCLOAK_CLIENTSECRET', '')
    googleKey = getEnvProperty('GOOGLE_API_KEY', '')
    emailUser = getEnvProperty('EMAIL_USER', '')
    emailPass = getEnvProperty('EMAIL_PASSWORD', '')
    downloadUrl = getEnvProperty('DOWNLOAD_URL', '')
    downloadUser = getEnvProperty('DOWNLOAD_APPNAME', '')
    downloadPass = getEnvProperty('DOWNLOAD_APPPW', '')
    ipgeolocationApiUrl = getEnvProperty('IPGEOLOCATION_APIURL', '')
    ipgeolocationApiKey = getEnvProperty('IPGEOLOCATION_APIKEY', '')
    sendinblueApiKey = getEnvProperty('SENDINBLUE_API_KEY', '')
    sendinblueApiUrl = getEnvProperty('SENDINBLUE_API_URL', '')
    sendinblueFolderId = getEnvProperty('SENDINBLUE_FOLDER', '')
    licenseUrl = getEnvProperty('LICENSE_URL', '')
    licenseUser = getEnvProperty('LICENSE_USER', '')
    licensePass = getEnvProperty('LICENSE_PASSWORD', '')
}
task startContainers(
        description: 'Start all docker containers',
        group: 'docker'
) {
    doLast {
        exec {
            executable 'docker-compose'
            args('-p', dockerContainerPrefix, '-f', dockerComposeFilePath, 'up', '--build', '--force-recreate', '-d')
            environment('LIFERAY_BUNDLE_DIR', bundleDir)
        }
    }
}

task startLiferay(
        'description': 'Start Liferay stack',
        'group': 'docker'
) {
    doLast {
        delete "$bundleDir"
        delete "$liferayMount"
        bundleDirectories.forEach {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        copy {
            from("$projectDir/configs/$environment/")
            into("$liferayMount")
            include("*.properties")
            filter(ReplaceTokens, tokens: [
                    'MYSQL_DATABASE'        : dbName,
                    'MYSQL_USER'            : dbUser,
                    'MYSQL_PASSWORD'        : dbPassword,
                    'DEFAULT_ADMIN_PASSWORD': defaultLiferayAdminPassword,
                    'KEYCLOAK_URL'          : keyUrl,
                    'KEYCLOAK_CLIENTID'     : keyClient,
                    'KEYCLOAK_CLIENTSECRET' : keySecret,
                    'GOOGLE_API_KEY'        : googleKey,
                    'EMAIL_USER'            : emailUser,
                    'EMAIL_PASSWORD'        : emailPass,
                    'DOWNLOAD_URL'          : downloadUrl,
                    'DOWNLOAD_APPNAME'      : downloadUser,
                    'DOWNLOAD_APPPW'        : downloadPass,
                    'IPGEOLOCATION_APIURL'       : ipgeolocationApiUrl,
                    'IPGEOLOCATION_APIKEY'       : ipgeolocationApiKey,
                    'SENDINBLUE_API_KEY'    : sendinblueApiKey,
                    'SENDINBLUE_API_URL'    : sendinblueApiUrl,
                    'SENDINBLUE_FOLDER'    : sendinblueFolderId,
                    'IPGEOLOCATION_APIURL'  : ipgeolocationApiUrl,
                    'IPGEOLOCATION_APIKEY'  : ipgeolocationApiKey,
                    'LICENSE_URL'           : licenseUrl,
                    'LICENSE_USER'          : licenseUser,
                    'LICENSE_PASSWORD'      : licensePass
            ])
        }
        copy {
            from("$projectDir/configs/$environment/") {
                exclude "osgi", "**.properties", "config"
            }
            into("$liferayMount")
        }
        copy {
            from("$projectDir/configs/common/")
            into("$liferayMount/osgi/configs/")
            include "**/**"
        }
        copy {
            from("$projectDir/configs/$environment/osgi/configs/")
            into("$liferayMount/osgi/configs")
            include "*.config"
        }
        copy {
            from("$projectDir/configs/$environment/osgi/modules/")
            into("$liferayMount/osgi/modules")
            include "*.xml"
        }
//        copy {
//            from("$projectDir/configs/$environment/config/")
//            into("$nextcloudMount")
//            include("*.php")
//            filter(ReplaceTokens, tokens: [
//                    'EMAIL_USER'            : emailUser,
//                    'EMAIL_PASSWORD'        : emailPass
//            ])
//        }
        copy {
            from projectDir
            into deployFolder
            include "license.xml"
        }
    }
    finalizedBy startContainers
}

task stopLiferay(
        'description': 'Stop all containers',
        'group': 'docker'
) {
    doLast {
        exec {
            executable 'docker-compose'
            args('-p', dockerContainerPrefix, '-f', dockerComposeFilePath, 'down', '--rmi', 'local')
        }
        print "stop"
    }
}

task dumpDB(
        description: 'Dump the database into the file system.',
        group: 'docker'
) {
    doLast {
        exec {
            executable 'docker'
            args('exec', '-t', "${dockerContainerPrefix}-mariadb", 'mysqldump', "-u${dbUser}", "-p${dbPassword}",
                    '--extended-insert=FALSE', '--no-autocommit', '--opt', "${dbName}")
            standardOutput new FileOutputStream("${projectDir}/docker/mariadb/docker-entrypoint-initdb.d/${dbName}.sql")
        }
        exec {
            executable 'bash'
            args('-c', "sed -i'' -e '1d' ${projectDir}/docker/mariadb/docker-entrypoint-initdb.d/${dbName}.sql")
        }
        delete("${projectDir}/docker/mariadb/docker-entrypoint-initdb.d/${dbName}.sql-e")
    }
}

task geoipDownload{
    group = 'Deltares'
    description = 'Downloads GeoIp2-Lite database'

    doLast {
        def bundlePath = ('/liferay/home/geoip2/')
        def geoLiteTar = ('GeoLite2-City.tar.gz')

        def f = new File(bundlePath + geoLiteTar)

        if (!f.exists()) {
            new URL('https://geolite.maxmind.com/download/geoip/database/' + geoLiteTar).withInputStream{ i -> f.withOutputStream{ it << i }}
        }

        copy {
            from (tarTree(resources.gzip(bundlePath + geoLiteTar))) {
                include "**/*.mmdb"
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
                }
                includeEmptyDirs = false
            }
            into bundlePath
        }
    }
}

def getEnvProperty(String propertyName, String defaultValue) {
    if (project.hasProperty(propertyName)) {
        return project.getProperty(propertyName) ?: defaultValue
    }
    return defaultValue
}
