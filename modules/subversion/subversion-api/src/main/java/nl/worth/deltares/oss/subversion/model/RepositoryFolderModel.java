/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.worth.deltares.oss.subversion.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the RepositoryFolder service. Represents a row in the &quot;Subversion_RepositoryFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>nl.worth.deltares.oss.subversion.model.impl.RepositoryFolderModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>nl.worth.deltares.oss.subversion.model.impl.RepositoryFolderImpl</code>.
 * </p>
 *
 * @author Pier-Angelo Gaetani @ Worth Systems
 * @see RepositoryFolder
 * @generated
 */
@ProviderType
public interface RepositoryFolderModel extends BaseModel<RepositoryFolder> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a repository folder model instance should use the {@link RepositoryFolder} interface instead.
	 */

	/**
	 * Returns the primary key of this repository folder.
	 *
	 * @return the primary key of this repository folder
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this repository folder.
	 *
	 * @param primaryKey the primary key of this repository folder
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the folder ID of this repository folder.
	 *
	 * @return the folder ID of this repository folder
	 */
	public long getFolderId();

	/**
	 * Sets the folder ID of this repository folder.
	 *
	 * @param folderId the folder ID of this repository folder
	 */
	public void setFolderId(long folderId);

	/**
	 * Returns the repository ID of this repository folder.
	 *
	 * @return the repository ID of this repository folder
	 */
	public long getRepositoryId();

	/**
	 * Sets the repository ID of this repository folder.
	 *
	 * @param repositoryId the repository ID of this repository folder
	 */
	public void setRepositoryId(long repositoryId);

	/**
	 * Returns the name of this repository folder.
	 *
	 * @return the name of this repository folder
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this repository folder.
	 *
	 * @param name the name of this repository folder
	 */
	public void setName(String name);

	/**
	 * Returns the world read of this repository folder.
	 *
	 * @return the world read of this repository folder
	 */
	public boolean getWorldRead();

	/**
	 * Returns <code>true</code> if this repository folder is world read.
	 *
	 * @return <code>true</code> if this repository folder is world read; <code>false</code> otherwise
	 */
	public boolean isWorldRead();

	/**
	 * Sets whether this repository folder is world read.
	 *
	 * @param worldRead the world read of this repository folder
	 */
	public void setWorldRead(boolean worldRead);

	/**
	 * Returns the world write of this repository folder.
	 *
	 * @return the world write of this repository folder
	 */
	public boolean getWorldWrite();

	/**
	 * Returns <code>true</code> if this repository folder is world write.
	 *
	 * @return <code>true</code> if this repository folder is world write; <code>false</code> otherwise
	 */
	public boolean isWorldWrite();

	/**
	 * Sets whether this repository folder is world write.
	 *
	 * @param worldWrite the world write of this repository folder
	 */
	public void setWorldWrite(boolean worldWrite);

	/**
	 * Returns the create date of this repository folder.
	 *
	 * @return the create date of this repository folder
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this repository folder.
	 *
	 * @param createDate the create date of this repository folder
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this repository folder.
	 *
	 * @return the modified date of this repository folder
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this repository folder.
	 *
	 * @param modifiedDate the modified date of this repository folder
	 */
	public void setModifiedDate(Date modifiedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		nl.worth.deltares.oss.subversion.model.RepositoryFolder
			repositoryFolder);

	@Override
	public int hashCode();

	@Override
	public CacheModel<nl.worth.deltares.oss.subversion.model.RepositoryFolder>
		toCacheModel();

	@Override
	public nl.worth.deltares.oss.subversion.model.RepositoryFolder
		toEscapedModel();

	@Override
	public nl.worth.deltares.oss.subversion.model.RepositoryFolder
		toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}