/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.worth.deltares.oss.subversion.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.service.BaseServiceImpl;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import javax.sql.DataSource;

import nl.worth.deltares.oss.subversion.model.RepositoryFolder;
import nl.worth.deltares.oss.subversion.service.RepositoryFolderService;
import nl.worth.deltares.oss.subversion.service.persistence.RepositoryFolderPermissionPersistence;
import nl.worth.deltares.oss.subversion.service.persistence.RepositoryFolderPersistence;
import nl.worth.deltares.oss.subversion.service.persistence.RepositoryLogPersistence;
import nl.worth.deltares.oss.subversion.service.persistence.RepositoryPersistence;

/**
 * Provides the base implementation for the repository folder remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link nl.worth.deltares.oss.subversion.service.impl.RepositoryFolderServiceImpl}.
 * </p>
 *
 * @author Pier-Angelo Gaetani @ Worth Systems
 * @see nl.worth.deltares.oss.subversion.service.impl.RepositoryFolderServiceImpl
 * @generated
 */
public abstract class RepositoryFolderServiceBaseImpl
	extends BaseServiceImpl
	implements RepositoryFolderService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>RepositoryFolderService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>nl.worth.deltares.oss.subversion.service.RepositoryFolderServiceUtil</code>.
	 */

	/**
	 * Returns the repository local service.
	 *
	 * @return the repository local service
	 */
	public nl.worth.deltares.oss.subversion.service.RepositoryLocalService
		getRepositoryLocalService() {

		return repositoryLocalService;
	}

	/**
	 * Sets the repository local service.
	 *
	 * @param repositoryLocalService the repository local service
	 */
	public void setRepositoryLocalService(
		nl.worth.deltares.oss.subversion.service.RepositoryLocalService
			repositoryLocalService) {

		this.repositoryLocalService = repositoryLocalService;
	}

	/**
	 * Returns the repository remote service.
	 *
	 * @return the repository remote service
	 */
	public nl.worth.deltares.oss.subversion.service.RepositoryService
		getRepositoryService() {

		return repositoryService;
	}

	/**
	 * Sets the repository remote service.
	 *
	 * @param repositoryService the repository remote service
	 */
	public void setRepositoryService(
		nl.worth.deltares.oss.subversion.service.RepositoryService
			repositoryService) {

		this.repositoryService = repositoryService;
	}

	/**
	 * Returns the repository persistence.
	 *
	 * @return the repository persistence
	 */
	public RepositoryPersistence getRepositoryPersistence() {
		return repositoryPersistence;
	}

	/**
	 * Sets the repository persistence.
	 *
	 * @param repositoryPersistence the repository persistence
	 */
	public void setRepositoryPersistence(
		RepositoryPersistence repositoryPersistence) {

		this.repositoryPersistence = repositoryPersistence;
	}

	/**
	 * Returns the repository folder local service.
	 *
	 * @return the repository folder local service
	 */
	public nl.worth.deltares.oss.subversion.service.RepositoryFolderLocalService
		getRepositoryFolderLocalService() {

		return repositoryFolderLocalService;
	}

	/**
	 * Sets the repository folder local service.
	 *
	 * @param repositoryFolderLocalService the repository folder local service
	 */
	public void setRepositoryFolderLocalService(
		nl.worth.deltares.oss.subversion.service.RepositoryFolderLocalService
			repositoryFolderLocalService) {

		this.repositoryFolderLocalService = repositoryFolderLocalService;
	}

	/**
	 * Returns the repository folder remote service.
	 *
	 * @return the repository folder remote service
	 */
	public RepositoryFolderService getRepositoryFolderService() {
		return repositoryFolderService;
	}

	/**
	 * Sets the repository folder remote service.
	 *
	 * @param repositoryFolderService the repository folder remote service
	 */
	public void setRepositoryFolderService(
		RepositoryFolderService repositoryFolderService) {

		this.repositoryFolderService = repositoryFolderService;
	}

	/**
	 * Returns the repository folder persistence.
	 *
	 * @return the repository folder persistence
	 */
	public RepositoryFolderPersistence getRepositoryFolderPersistence() {
		return repositoryFolderPersistence;
	}

	/**
	 * Sets the repository folder persistence.
	 *
	 * @param repositoryFolderPersistence the repository folder persistence
	 */
	public void setRepositoryFolderPersistence(
		RepositoryFolderPersistence repositoryFolderPersistence) {

		this.repositoryFolderPersistence = repositoryFolderPersistence;
	}

	/**
	 * Returns the repository folder permission local service.
	 *
	 * @return the repository folder permission local service
	 */
	public nl.worth.deltares.oss.subversion.service.
		RepositoryFolderPermissionLocalService
			getRepositoryFolderPermissionLocalService() {

		return repositoryFolderPermissionLocalService;
	}

	/**
	 * Sets the repository folder permission local service.
	 *
	 * @param repositoryFolderPermissionLocalService the repository folder permission local service
	 */
	public void setRepositoryFolderPermissionLocalService(
		nl.worth.deltares.oss.subversion.service.
			RepositoryFolderPermissionLocalService
				repositoryFolderPermissionLocalService) {

		this.repositoryFolderPermissionLocalService =
			repositoryFolderPermissionLocalService;
	}

	/**
	 * Returns the repository folder permission remote service.
	 *
	 * @return the repository folder permission remote service
	 */
	public
		nl.worth.deltares.oss.subversion.service.
			RepositoryFolderPermissionService
				getRepositoryFolderPermissionService() {

		return repositoryFolderPermissionService;
	}

	/**
	 * Sets the repository folder permission remote service.
	 *
	 * @param repositoryFolderPermissionService the repository folder permission remote service
	 */
	public void setRepositoryFolderPermissionService(
		nl.worth.deltares.oss.subversion.service.
			RepositoryFolderPermissionService
				repositoryFolderPermissionService) {

		this.repositoryFolderPermissionService =
			repositoryFolderPermissionService;
	}

	/**
	 * Returns the repository folder permission persistence.
	 *
	 * @return the repository folder permission persistence
	 */
	public RepositoryFolderPermissionPersistence
		getRepositoryFolderPermissionPersistence() {

		return repositoryFolderPermissionPersistence;
	}

	/**
	 * Sets the repository folder permission persistence.
	 *
	 * @param repositoryFolderPermissionPersistence the repository folder permission persistence
	 */
	public void setRepositoryFolderPermissionPersistence(
		RepositoryFolderPermissionPersistence
			repositoryFolderPermissionPersistence) {

		this.repositoryFolderPermissionPersistence =
			repositoryFolderPermissionPersistence;
	}

	/**
	 * Returns the repository log local service.
	 *
	 * @return the repository log local service
	 */
	public nl.worth.deltares.oss.subversion.service.RepositoryLogLocalService
		getRepositoryLogLocalService() {

		return repositoryLogLocalService;
	}

	/**
	 * Sets the repository log local service.
	 *
	 * @param repositoryLogLocalService the repository log local service
	 */
	public void setRepositoryLogLocalService(
		nl.worth.deltares.oss.subversion.service.RepositoryLogLocalService
			repositoryLogLocalService) {

		this.repositoryLogLocalService = repositoryLogLocalService;
	}

	/**
	 * Returns the repository log remote service.
	 *
	 * @return the repository log remote service
	 */
	public nl.worth.deltares.oss.subversion.service.RepositoryLogService
		getRepositoryLogService() {

		return repositoryLogService;
	}

	/**
	 * Sets the repository log remote service.
	 *
	 * @param repositoryLogService the repository log remote service
	 */
	public void setRepositoryLogService(
		nl.worth.deltares.oss.subversion.service.RepositoryLogService
			repositoryLogService) {

		this.repositoryLogService = repositoryLogService;
	}

	/**
	 * Returns the repository log persistence.
	 *
	 * @return the repository log persistence
	 */
	public RepositoryLogPersistence getRepositoryLogPersistence() {
		return repositoryLogPersistence;
	}

	/**
	 * Sets the repository log persistence.
	 *
	 * @param repositoryLogPersistence the repository log persistence
	 */
	public void setRepositoryLogPersistence(
		RepositoryLogPersistence repositoryLogPersistence) {

		this.repositoryLogPersistence = repositoryLogPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.kernel.service.ClassNameService
		getClassNameService() {

		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.kernel.service.ClassNameService classNameService) {

		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.kernel.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.kernel.service.UserService userService) {

		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
	}

	public void destroy() {
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RepositoryFolderService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RepositoryFolder.class;
	}

	protected String getModelClassName() {
		return RepositoryFolder.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = repositoryFolderPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryLocalService.class
	)
	protected nl.worth.deltares.oss.subversion.service.RepositoryLocalService
		repositoryLocalService;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryService.class
	)
	protected nl.worth.deltares.oss.subversion.service.RepositoryService
		repositoryService;

	@BeanReference(type = RepositoryPersistence.class)
	protected RepositoryPersistence repositoryPersistence;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryFolderLocalService.class
	)
	protected
		nl.worth.deltares.oss.subversion.service.RepositoryFolderLocalService
			repositoryFolderLocalService;

	@BeanReference(type = RepositoryFolderService.class)
	protected RepositoryFolderService repositoryFolderService;

	@BeanReference(type = RepositoryFolderPersistence.class)
	protected RepositoryFolderPersistence repositoryFolderPersistence;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryFolderPermissionLocalService.class
	)
	protected nl.worth.deltares.oss.subversion.service.
		RepositoryFolderPermissionLocalService
			repositoryFolderPermissionLocalService;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryFolderPermissionService.class
	)
	protected
		nl.worth.deltares.oss.subversion.service.
			RepositoryFolderPermissionService repositoryFolderPermissionService;

	@BeanReference(type = RepositoryFolderPermissionPersistence.class)
	protected RepositoryFolderPermissionPersistence
		repositoryFolderPermissionPersistence;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryLogLocalService.class
	)
	protected nl.worth.deltares.oss.subversion.service.RepositoryLogLocalService
		repositoryLogLocalService;

	@BeanReference(
		type = nl.worth.deltares.oss.subversion.service.RepositoryLogService.class
	)
	protected nl.worth.deltares.oss.subversion.service.RepositoryLogService
		repositoryLogService;

	@BeanReference(type = RepositoryLogPersistence.class)
	protected RepositoryLogPersistence repositoryLogPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameService
		classNameService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserService.class
	)
	protected com.liferay.portal.kernel.service.UserService userService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

}