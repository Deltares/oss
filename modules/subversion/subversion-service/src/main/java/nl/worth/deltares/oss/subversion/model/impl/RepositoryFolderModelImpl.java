/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.worth.deltares.oss.subversion.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import nl.worth.deltares.oss.subversion.model.RepositoryFolder;
import nl.worth.deltares.oss.subversion.model.RepositoryFolderModel;
import nl.worth.deltares.oss.subversion.model.RepositoryFolderSoap;

/**
 * The base model implementation for the RepositoryFolder service. Represents a row in the &quot;Subversion_RepositoryFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RepositoryFolderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RepositoryFolderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RepositoryFolderImpl
 * @generated
 */
@JSON(strict = true)
public class RepositoryFolderModelImpl
	extends BaseModelImpl<RepositoryFolder> implements RepositoryFolderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a repository folder model instance should use the <code>RepositoryFolder</code> interface instead.
	 */
	public static final String TABLE_NAME = "Subversion_RepositoryFolder";

	public static final Object[][] TABLE_COLUMNS = {
		{"folderId", Types.BIGINT}, {"repositoryId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"worldRead", Types.BOOLEAN},
		{"worldWrite", Types.BOOLEAN}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("repositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("worldRead", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("worldWrite", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Subversion_RepositoryFolder (folderId LONG not null primary key,repositoryId LONG,name VARCHAR(75) null,worldRead BOOLEAN,worldWrite BOOLEAN,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Subversion_RepositoryFolder";

	public static final String ORDER_BY_JPQL =
		" ORDER BY repositoryFolder.folderId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Subversion_RepositoryFolder.folderId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REPOSITORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOLDERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static RepositoryFolder toModel(RepositoryFolderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RepositoryFolder model = new RepositoryFolderImpl();

		model.setFolderId(soapModel.getFolderId());
		model.setRepositoryId(soapModel.getRepositoryId());
		model.setName(soapModel.getName());
		model.setWorldRead(soapModel.isWorldRead());
		model.setWorldWrite(soapModel.isWorldWrite());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<RepositoryFolder> toModels(
		RepositoryFolderSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RepositoryFolder> models = new ArrayList<RepositoryFolder>(
			soapModels.length);

		for (RepositoryFolderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RepositoryFolderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _folderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFolderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _folderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RepositoryFolder.class;
	}

	@Override
	public String getModelClassName() {
		return RepositoryFolder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RepositoryFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RepositoryFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RepositoryFolder, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RepositoryFolder)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RepositoryFolder, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RepositoryFolder, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RepositoryFolder)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RepositoryFolder, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RepositoryFolder, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RepositoryFolder>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RepositoryFolder.class.getClassLoader(), RepositoryFolder.class,
			ModelWrapper.class);

		try {
			Constructor<RepositoryFolder> constructor =
				(Constructor<RepositoryFolder>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<RepositoryFolder, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RepositoryFolder, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RepositoryFolder, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<RepositoryFolder, Object>>();
		Map<String, BiConsumer<RepositoryFolder, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<RepositoryFolder, ?>>();

		attributeGetterFunctions.put("folderId", RepositoryFolder::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId",
			(BiConsumer<RepositoryFolder, Long>)RepositoryFolder::setFolderId);
		attributeGetterFunctions.put(
			"repositoryId", RepositoryFolder::getRepositoryId);
		attributeSetterBiConsumers.put(
			"repositoryId",
			(BiConsumer<RepositoryFolder, Long>)
				RepositoryFolder::setRepositoryId);
		attributeGetterFunctions.put("name", RepositoryFolder::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<RepositoryFolder, String>)RepositoryFolder::setName);
		attributeGetterFunctions.put(
			"worldRead", RepositoryFolder::getWorldRead);
		attributeSetterBiConsumers.put(
			"worldRead",
			(BiConsumer<RepositoryFolder, Boolean>)
				RepositoryFolder::setWorldRead);
		attributeGetterFunctions.put(
			"worldWrite", RepositoryFolder::getWorldWrite);
		attributeSetterBiConsumers.put(
			"worldWrite",
			(BiConsumer<RepositoryFolder, Boolean>)
				RepositoryFolder::setWorldWrite);
		attributeGetterFunctions.put(
			"createDate", RepositoryFolder::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RepositoryFolder, Date>)
				RepositoryFolder::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RepositoryFolder::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RepositoryFolder, Date>)
				RepositoryFolder::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	@JSON
	@Override
	public long getRepositoryId() {
		return _repositoryId;
	}

	@Override
	public void setRepositoryId(long repositoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_repositoryId = repositoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRepositoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("repositoryId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public boolean getWorldRead() {
		return _worldRead;
	}

	@JSON
	@Override
	public boolean isWorldRead() {
		return _worldRead;
	}

	@Override
	public void setWorldRead(boolean worldRead) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_worldRead = worldRead;
	}

	@JSON
	@Override
	public boolean getWorldWrite() {
		return _worldWrite;
	}

	@JSON
	@Override
	public boolean isWorldWrite() {
		return _worldWrite;
	}

	@Override
	public void setWorldWrite(boolean worldWrite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_worldWrite = worldWrite;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RepositoryFolder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RepositoryFolder toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RepositoryFolder>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RepositoryFolderImpl repositoryFolderImpl = new RepositoryFolderImpl();

		repositoryFolderImpl.setFolderId(getFolderId());
		repositoryFolderImpl.setRepositoryId(getRepositoryId());
		repositoryFolderImpl.setName(getName());
		repositoryFolderImpl.setWorldRead(isWorldRead());
		repositoryFolderImpl.setWorldWrite(isWorldWrite());
		repositoryFolderImpl.setCreateDate(getCreateDate());
		repositoryFolderImpl.setModifiedDate(getModifiedDate());

		repositoryFolderImpl.resetOriginalValues();

		return repositoryFolderImpl;
	}

	@Override
	public RepositoryFolder cloneWithOriginalValues() {
		RepositoryFolderImpl repositoryFolderImpl = new RepositoryFolderImpl();

		repositoryFolderImpl.setFolderId(
			this.<Long>getColumnOriginalValue("folderId"));
		repositoryFolderImpl.setRepositoryId(
			this.<Long>getColumnOriginalValue("repositoryId"));
		repositoryFolderImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		repositoryFolderImpl.setWorldRead(
			this.<Boolean>getColumnOriginalValue("worldRead"));
		repositoryFolderImpl.setWorldWrite(
			this.<Boolean>getColumnOriginalValue("worldWrite"));
		repositoryFolderImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		repositoryFolderImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return repositoryFolderImpl;
	}

	@Override
	public int compareTo(RepositoryFolder repositoryFolder) {
		int value = 0;

		if (getFolderId() < repositoryFolder.getFolderId()) {
			value = -1;
		}
		else if (getFolderId() > repositoryFolder.getFolderId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RepositoryFolder)) {
			return false;
		}

		RepositoryFolder repositoryFolder = (RepositoryFolder)object;

		long primaryKey = repositoryFolder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RepositoryFolder> toCacheModel() {
		RepositoryFolderCacheModel repositoryFolderCacheModel =
			new RepositoryFolderCacheModel();

		repositoryFolderCacheModel.folderId = getFolderId();

		repositoryFolderCacheModel.repositoryId = getRepositoryId();

		repositoryFolderCacheModel.name = getName();

		String name = repositoryFolderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			repositoryFolderCacheModel.name = null;
		}

		repositoryFolderCacheModel.worldRead = isWorldRead();

		repositoryFolderCacheModel.worldWrite = isWorldWrite();

		Date createDate = getCreateDate();

		if (createDate != null) {
			repositoryFolderCacheModel.createDate = createDate.getTime();
		}
		else {
			repositoryFolderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			repositoryFolderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			repositoryFolderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return repositoryFolderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RepositoryFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RepositoryFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RepositoryFolder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RepositoryFolder)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RepositoryFolder, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RepositoryFolder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RepositoryFolder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RepositoryFolder)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RepositoryFolder>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _folderId;
	private long _repositoryId;
	private String _name;
	private boolean _worldRead;
	private boolean _worldWrite;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<RepositoryFolder, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RepositoryFolder)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("repositoryId", _repositoryId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("worldRead", _worldRead);
		_columnOriginalValues.put("worldWrite", _worldWrite);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("folderId", 1L);

		columnBitmasks.put("repositoryId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("worldRead", 8L);

		columnBitmasks.put("worldWrite", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RepositoryFolder _escapedModel;

}