/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.worth.deltares.oss.subversion.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import nl.worth.deltares.oss.subversion.model.RepositoryLog;
import nl.worth.deltares.oss.subversion.model.RepositoryLogModel;

/**
 * The base model implementation for the RepositoryLog service. Represents a row in the &quot;Subversion_RepositoryLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RepositoryLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RepositoryLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RepositoryLogImpl
 * @generated
 */
@JSON(strict = true)
public class RepositoryLogModelImpl
	extends BaseModelImpl<RepositoryLog> implements RepositoryLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a repository log model instance should use the <code>RepositoryLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "Subversion_RepositoryLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"logId", Types.BIGINT}, {"ipAddress", Types.VARCHAR},
		{"screenName", Types.VARCHAR}, {"action", Types.VARCHAR},
		{"createDate", Types.BIGINT}, {"repository", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("logId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("action", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("repository", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Subversion_RepositoryLog (logId LONG not null primary key,ipAddress VARCHAR(75) null,screenName VARCHAR(75) null,action VARCHAR(75) null,createDate LONG,repository VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Subversion_RepositoryLog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY repositoryLog.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Subversion_RepositoryLog.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RepositoryLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _logId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _logId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RepositoryLog.class;
	}

	@Override
	public String getModelClassName() {
		return RepositoryLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RepositoryLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RepositoryLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RepositoryLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RepositoryLog)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RepositoryLog, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RepositoryLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RepositoryLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RepositoryLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RepositoryLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RepositoryLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RepositoryLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RepositoryLog, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RepositoryLog, Object>>();
		Map<String, BiConsumer<RepositoryLog, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RepositoryLog, ?>>();

		attributeGetterFunctions.put("logId", RepositoryLog::getLogId);
		attributeSetterBiConsumers.put(
			"logId", (BiConsumer<RepositoryLog, Long>)RepositoryLog::setLogId);
		attributeGetterFunctions.put("ipAddress", RepositoryLog::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress",
			(BiConsumer<RepositoryLog, String>)RepositoryLog::setIpAddress);
		attributeGetterFunctions.put(
			"screenName", RepositoryLog::getScreenName);
		attributeSetterBiConsumers.put(
			"screenName",
			(BiConsumer<RepositoryLog, String>)RepositoryLog::setScreenName);
		attributeGetterFunctions.put("action", RepositoryLog::getAction);
		attributeSetterBiConsumers.put(
			"action",
			(BiConsumer<RepositoryLog, String>)RepositoryLog::setAction);
		attributeGetterFunctions.put(
			"createDate", RepositoryLog::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RepositoryLog, Long>)RepositoryLog::setCreateDate);
		attributeGetterFunctions.put(
			"repository", RepositoryLog::getRepository);
		attributeSetterBiConsumers.put(
			"repository",
			(BiConsumer<RepositoryLog, String>)RepositoryLog::setRepository);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLogId() {
		return _logId;
	}

	@Override
	public void setLogId(long logId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_logId = logId;
	}

	@JSON
	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_screenName = screenName;
	}

	@JSON
	@Override
	public String getAction() {
		if (_action == null) {
			return "";
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_action = action;
	}

	@JSON
	@Override
	public long getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(long createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getRepository() {
		if (_repository == null) {
			return "";
		}
		else {
			return _repository;
		}
	}

	@Override
	public void setRepository(String repository) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_repository = repository;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RepositoryLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RepositoryLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RepositoryLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RepositoryLogImpl repositoryLogImpl = new RepositoryLogImpl();

		repositoryLogImpl.setLogId(getLogId());
		repositoryLogImpl.setIpAddress(getIpAddress());
		repositoryLogImpl.setScreenName(getScreenName());
		repositoryLogImpl.setAction(getAction());
		repositoryLogImpl.setCreateDate(getCreateDate());
		repositoryLogImpl.setRepository(getRepository());

		repositoryLogImpl.resetOriginalValues();

		return repositoryLogImpl;
	}

	@Override
	public RepositoryLog cloneWithOriginalValues() {
		RepositoryLogImpl repositoryLogImpl = new RepositoryLogImpl();

		repositoryLogImpl.setLogId(this.<Long>getColumnOriginalValue("logId"));
		repositoryLogImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));
		repositoryLogImpl.setScreenName(
			this.<String>getColumnOriginalValue("screenName"));
		repositoryLogImpl.setAction(
			this.<String>getColumnOriginalValue("action"));
		repositoryLogImpl.setCreateDate(
			this.<Long>getColumnOriginalValue("createDate"));
		repositoryLogImpl.setRepository(
			this.<String>getColumnOriginalValue("repository"));

		return repositoryLogImpl;
	}

	@Override
	public int compareTo(RepositoryLog repositoryLog) {
		int value = 0;

		if (getCreateDate() < repositoryLog.getCreateDate()) {
			value = -1;
		}
		else if (getCreateDate() > repositoryLog.getCreateDate()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RepositoryLog)) {
			return false;
		}

		RepositoryLog repositoryLog = (RepositoryLog)object;

		long primaryKey = repositoryLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RepositoryLog> toCacheModel() {
		RepositoryLogCacheModel repositoryLogCacheModel =
			new RepositoryLogCacheModel();

		repositoryLogCacheModel.logId = getLogId();

		repositoryLogCacheModel.ipAddress = getIpAddress();

		String ipAddress = repositoryLogCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			repositoryLogCacheModel.ipAddress = null;
		}

		repositoryLogCacheModel.screenName = getScreenName();

		String screenName = repositoryLogCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			repositoryLogCacheModel.screenName = null;
		}

		repositoryLogCacheModel.action = getAction();

		String action = repositoryLogCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			repositoryLogCacheModel.action = null;
		}

		repositoryLogCacheModel.createDate = getCreateDate();

		repositoryLogCacheModel.repository = getRepository();

		String repository = repositoryLogCacheModel.repository;

		if ((repository != null) && (repository.length() == 0)) {
			repositoryLogCacheModel.repository = null;
		}

		return repositoryLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RepositoryLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RepositoryLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RepositoryLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((RepositoryLog)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RepositoryLog>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RepositoryLog.class, ModelWrapper.class);

	}

	private long _logId;
	private String _ipAddress;
	private String _screenName;
	private String _action;
	private long _createDate;
	private String _repository;

	public <T> T getColumnValue(String columnName) {
		Function<RepositoryLog, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RepositoryLog)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("logId", _logId);
		_columnOriginalValues.put("ipAddress", _ipAddress);
		_columnOriginalValues.put("screenName", _screenName);
		_columnOriginalValues.put("action", _action);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("repository", _repository);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("logId", 1L);

		columnBitmasks.put("ipAddress", 2L);

		columnBitmasks.put("screenName", 4L);

		columnBitmasks.put("action", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("repository", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RepositoryLog _escapedModel;

}