/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.worth.deltares.subversion.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.worth.deltares.subversion.model.RepositoryFolderPermission;
import com.worth.deltares.subversion.model.RepositoryFolderPermissionModel;
import com.worth.deltares.subversion.model.RepositoryFolderPermissionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RepositoryFolderPermission service. Represents a row in the &quot;deltares_RepositoryFolderPermission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RepositoryFolderPermissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RepositoryFolderPermissionImpl}.
 * </p>
 *
 * @author Pier-Angelo Gaetani @ Worth Systems
 * @see RepositoryFolderPermissionImpl
 * @see RepositoryFolderPermission
 * @see RepositoryFolderPermissionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RepositoryFolderPermissionModelImpl extends BaseModelImpl<RepositoryFolderPermission>
	implements RepositoryFolderPermissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a repository folder permission model instance should use the {@link RepositoryFolderPermission} interface instead.
	 */
	public static final String TABLE_NAME = "deltares_RepositoryFolderPermission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permissionId", Types.BIGINT },
			{ "folderId", Types.BIGINT },
			{ "permission", Types.VARCHAR },
			{ "recurse", Types.BOOLEAN },
			{ "entityType", Types.VARCHAR },
			{ "entityId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("permissionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("permission", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recurse", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("entityType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table deltares_RepositoryFolderPermission (permissionId LONG not null primary key,folderId LONG,permission VARCHAR(75) null,recurse BOOLEAN,entityType VARCHAR(75) null,entityId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table deltares_RepositoryFolderPermission";
	public static final String ORDER_BY_JPQL = " ORDER BY repositoryFolderPermission.permissionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY deltares_RepositoryFolderPermission.permissionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.worth.deltares.subversion.model.RepositoryFolderPermission"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.worth.deltares.subversion.model.RepositoryFolderPermission"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.worth.deltares.subversion.model.RepositoryFolderPermission"),
			true);
	public static final long FOLDERID_COLUMN_BITMASK = 1L;
	public static final long PERMISSIONID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RepositoryFolderPermission toModel(
		RepositoryFolderPermissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RepositoryFolderPermission model = new RepositoryFolderPermissionImpl();

		model.setPermissionId(soapModel.getPermissionId());
		model.setFolderId(soapModel.getFolderId());
		model.setPermission(soapModel.getPermission());
		model.setRecurse(soapModel.getRecurse());
		model.setEntityType(soapModel.getEntityType());
		model.setEntityId(soapModel.getEntityId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RepositoryFolderPermission> toModels(
		RepositoryFolderPermissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RepositoryFolderPermission> models = new ArrayList<RepositoryFolderPermission>(soapModels.length);

		for (RepositoryFolderPermissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"lock.expiration.time.com.worth.deltares.subversion.model.RepositoryFolderPermission"));

	public RepositoryFolderPermissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _permissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPermissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _permissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RepositoryFolderPermission.class;
	}

	@Override
	public String getModelClassName() {
		return RepositoryFolderPermission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permissionId", getPermissionId());
		attributes.put("folderId", getFolderId());
		attributes.put("permission", getPermission());
		attributes.put("recurse", getRecurse());
		attributes.put("entityType", getEntityType());
		attributes.put("entityId", getEntityId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long permissionId = (Long)attributes.get("permissionId");

		if (permissionId != null) {
			setPermissionId(permissionId);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		String permission = (String)attributes.get("permission");

		if (permission != null) {
			setPermission(permission);
		}

		Boolean recurse = (Boolean)attributes.get("recurse");

		if (recurse != null) {
			setRecurse(recurse);
		}

		String entityType = (String)attributes.get("entityType");

		if (entityType != null) {
			setEntityType(entityType);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getPermissionId() {
		return _permissionId;
	}

	@Override
	public void setPermissionId(long permissionId) {
		_permissionId = permissionId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_columnBitmask |= FOLDERID_COLUMN_BITMASK;

		if (!_setOriginalFolderId) {
			_setOriginalFolderId = true;

			_originalFolderId = _folderId;
		}

		_folderId = folderId;
	}

	public long getOriginalFolderId() {
		return _originalFolderId;
	}

	@JSON
	@Override
	public String getPermission() {
		if (_permission == null) {
			return "";
		}
		else {
			return _permission;
		}
	}

	@Override
	public void setPermission(String permission) {
		_permission = permission;
	}

	@JSON
	@Override
	public boolean getRecurse() {
		return _recurse;
	}

	@JSON
	@Override
	public boolean isRecurse() {
		return _recurse;
	}

	@Override
	public void setRecurse(boolean recurse) {
		_recurse = recurse;
	}

	@JSON
	@Override
	public String getEntityType() {
		if (_entityType == null) {
			return "";
		}
		else {
			return _entityType;
		}
	}

	@Override
	public void setEntityType(String entityType) {
		_entityType = entityType;
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_entityId = entityId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RepositoryFolderPermission.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RepositoryFolderPermission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RepositoryFolderPermission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RepositoryFolderPermissionImpl repositoryFolderPermissionImpl = new RepositoryFolderPermissionImpl();

		repositoryFolderPermissionImpl.setPermissionId(getPermissionId());
		repositoryFolderPermissionImpl.setFolderId(getFolderId());
		repositoryFolderPermissionImpl.setPermission(getPermission());
		repositoryFolderPermissionImpl.setRecurse(getRecurse());
		repositoryFolderPermissionImpl.setEntityType(getEntityType());
		repositoryFolderPermissionImpl.setEntityId(getEntityId());
		repositoryFolderPermissionImpl.setCreateDate(getCreateDate());
		repositoryFolderPermissionImpl.setModifiedDate(getModifiedDate());

		repositoryFolderPermissionImpl.resetOriginalValues();

		return repositoryFolderPermissionImpl;
	}

	@Override
	public int compareTo(RepositoryFolderPermission repositoryFolderPermission) {
		long primaryKey = repositoryFolderPermission.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RepositoryFolderPermission)) {
			return false;
		}

		RepositoryFolderPermission repositoryFolderPermission = (RepositoryFolderPermission)obj;

		long primaryKey = repositoryFolderPermission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RepositoryFolderPermissionModelImpl repositoryFolderPermissionModelImpl = this;

		repositoryFolderPermissionModelImpl._originalFolderId = repositoryFolderPermissionModelImpl._folderId;

		repositoryFolderPermissionModelImpl._setOriginalFolderId = false;

		repositoryFolderPermissionModelImpl._setModifiedDate = false;

		repositoryFolderPermissionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RepositoryFolderPermission> toCacheModel() {
		RepositoryFolderPermissionCacheModel repositoryFolderPermissionCacheModel =
			new RepositoryFolderPermissionCacheModel();

		repositoryFolderPermissionCacheModel.permissionId = getPermissionId();

		repositoryFolderPermissionCacheModel.folderId = getFolderId();

		repositoryFolderPermissionCacheModel.permission = getPermission();

		String permission = repositoryFolderPermissionCacheModel.permission;

		if ((permission != null) && (permission.length() == 0)) {
			repositoryFolderPermissionCacheModel.permission = null;
		}

		repositoryFolderPermissionCacheModel.recurse = getRecurse();

		repositoryFolderPermissionCacheModel.entityType = getEntityType();

		String entityType = repositoryFolderPermissionCacheModel.entityType;

		if ((entityType != null) && (entityType.length() == 0)) {
			repositoryFolderPermissionCacheModel.entityType = null;
		}

		repositoryFolderPermissionCacheModel.entityId = getEntityId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			repositoryFolderPermissionCacheModel.createDate = createDate.getTime();
		}
		else {
			repositoryFolderPermissionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			repositoryFolderPermissionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			repositoryFolderPermissionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return repositoryFolderPermissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{permissionId=");
		sb.append(getPermissionId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", permission=");
		sb.append(getPermission());
		sb.append(", recurse=");
		sb.append(getRecurse());
		sb.append(", entityType=");
		sb.append(getEntityType());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"com.worth.deltares.subversion.model.RepositoryFolderPermission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permissionId</column-name><column-value><![CDATA[");
		sb.append(getPermissionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permission</column-name><column-value><![CDATA[");
		sb.append(getPermission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recurse</column-name><column-value><![CDATA[");
		sb.append(getRecurse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityType</column-name><column-value><![CDATA[");
		sb.append(getEntityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RepositoryFolderPermission.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RepositoryFolderPermission.class
		};
	private long _permissionId;
	private long _folderId;
	private long _originalFolderId;
	private boolean _setOriginalFolderId;
	private String _permission;
	private boolean _recurse;
	private String _entityType;
	private long _entityId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private RepositoryFolderPermission _escapedModel;
}