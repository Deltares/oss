/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.worth.deltares.subversion.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.worth.deltares.subversion.model.RepositoryFolder;
import com.worth.deltares.subversion.model.RepositoryFolderModel;
import com.worth.deltares.subversion.model.RepositoryFolderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RepositoryFolder service. Represents a row in the &quot;deltares_RepositoryFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RepositoryFolderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RepositoryFolderImpl}.
 * </p>
 *
 * @author Pier-Angelo Gaetani @ Worth Systems
 * @see RepositoryFolderImpl
 * @see RepositoryFolder
 * @see RepositoryFolderModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RepositoryFolderModelImpl extends BaseModelImpl<RepositoryFolder>
	implements RepositoryFolderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a repository folder model instance should use the {@link RepositoryFolder} interface instead.
	 */
	public static final String TABLE_NAME = "deltares_RepositoryFolder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "folderId", Types.BIGINT },
			{ "repositoryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "worldRead", Types.BOOLEAN },
			{ "worldWrite", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("repositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("worldRead", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("worldWrite", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table deltares_RepositoryFolder (folderId LONG not null primary key,repositoryId LONG,name VARCHAR(75) null,worldRead BOOLEAN,worldWrite BOOLEAN,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table deltares_RepositoryFolder";
	public static final String ORDER_BY_JPQL = " ORDER BY repositoryFolder.folderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY deltares_RepositoryFolder.folderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.worth.deltares.subversion.model.RepositoryFolder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.worth.deltares.subversion.model.RepositoryFolder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.worth.deltares.subversion.model.RepositoryFolder"),
			true);
	public static final long REPOSITORYID_COLUMN_BITMASK = 1L;
	public static final long FOLDERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RepositoryFolder toModel(RepositoryFolderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RepositoryFolder model = new RepositoryFolderImpl();

		model.setFolderId(soapModel.getFolderId());
		model.setRepositoryId(soapModel.getRepositoryId());
		model.setName(soapModel.getName());
		model.setWorldRead(soapModel.getWorldRead());
		model.setWorldWrite(soapModel.getWorldWrite());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RepositoryFolder> toModels(
		RepositoryFolderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RepositoryFolder> models = new ArrayList<RepositoryFolder>(soapModels.length);

		for (RepositoryFolderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.worth.deltares.subversion.service.util.ServiceProps.get(
				"lock.expiration.time.com.worth.deltares.subversion.model.RepositoryFolder"));

	public RepositoryFolderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _folderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFolderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _folderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RepositoryFolder.class;
	}

	@Override
	public String getModelClassName() {
		return RepositoryFolder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("folderId", getFolderId());
		attributes.put("repositoryId", getRepositoryId());
		attributes.put("name", getName());
		attributes.put("worldRead", getWorldRead());
		attributes.put("worldWrite", getWorldWrite());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		Long repositoryId = (Long)attributes.get("repositoryId");

		if (repositoryId != null) {
			setRepositoryId(repositoryId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Boolean worldRead = (Boolean)attributes.get("worldRead");

		if (worldRead != null) {
			setWorldRead(worldRead);
		}

		Boolean worldWrite = (Boolean)attributes.get("worldWrite");

		if (worldWrite != null) {
			setWorldWrite(worldWrite);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_columnBitmask = -1L;

		_folderId = folderId;
	}

	@JSON
	@Override
	public long getRepositoryId() {
		return _repositoryId;
	}

	@Override
	public void setRepositoryId(long repositoryId) {
		_columnBitmask |= REPOSITORYID_COLUMN_BITMASK;

		if (!_setOriginalRepositoryId) {
			_setOriginalRepositoryId = true;

			_originalRepositoryId = _repositoryId;
		}

		_repositoryId = repositoryId;
	}

	public long getOriginalRepositoryId() {
		return _originalRepositoryId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public boolean getWorldRead() {
		return _worldRead;
	}

	@JSON
	@Override
	public boolean isWorldRead() {
		return _worldRead;
	}

	@Override
	public void setWorldRead(boolean worldRead) {
		_worldRead = worldRead;
	}

	@JSON
	@Override
	public boolean getWorldWrite() {
		return _worldWrite;
	}

	@JSON
	@Override
	public boolean isWorldWrite() {
		return _worldWrite;
	}

	@Override
	public void setWorldWrite(boolean worldWrite) {
		_worldWrite = worldWrite;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RepositoryFolder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RepositoryFolder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RepositoryFolder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RepositoryFolderImpl repositoryFolderImpl = new RepositoryFolderImpl();

		repositoryFolderImpl.setFolderId(getFolderId());
		repositoryFolderImpl.setRepositoryId(getRepositoryId());
		repositoryFolderImpl.setName(getName());
		repositoryFolderImpl.setWorldRead(getWorldRead());
		repositoryFolderImpl.setWorldWrite(getWorldWrite());
		repositoryFolderImpl.setCreateDate(getCreateDate());
		repositoryFolderImpl.setModifiedDate(getModifiedDate());

		repositoryFolderImpl.resetOriginalValues();

		return repositoryFolderImpl;
	}

	@Override
	public int compareTo(RepositoryFolder repositoryFolder) {
		int value = 0;

		if (getFolderId() < repositoryFolder.getFolderId()) {
			value = -1;
		}
		else if (getFolderId() > repositoryFolder.getFolderId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RepositoryFolder)) {
			return false;
		}

		RepositoryFolder repositoryFolder = (RepositoryFolder)obj;

		long primaryKey = repositoryFolder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RepositoryFolderModelImpl repositoryFolderModelImpl = this;

		repositoryFolderModelImpl._originalRepositoryId = repositoryFolderModelImpl._repositoryId;

		repositoryFolderModelImpl._setOriginalRepositoryId = false;

		repositoryFolderModelImpl._setModifiedDate = false;

		repositoryFolderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RepositoryFolder> toCacheModel() {
		RepositoryFolderCacheModel repositoryFolderCacheModel = new RepositoryFolderCacheModel();

		repositoryFolderCacheModel.folderId = getFolderId();

		repositoryFolderCacheModel.repositoryId = getRepositoryId();

		repositoryFolderCacheModel.name = getName();

		String name = repositoryFolderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			repositoryFolderCacheModel.name = null;
		}

		repositoryFolderCacheModel.worldRead = getWorldRead();

		repositoryFolderCacheModel.worldWrite = getWorldWrite();

		Date createDate = getCreateDate();

		if (createDate != null) {
			repositoryFolderCacheModel.createDate = createDate.getTime();
		}
		else {
			repositoryFolderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			repositoryFolderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			repositoryFolderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return repositoryFolderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{folderId=");
		sb.append(getFolderId());
		sb.append(", repositoryId=");
		sb.append(getRepositoryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", worldRead=");
		sb.append(getWorldRead());
		sb.append(", worldWrite=");
		sb.append(getWorldWrite());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.worth.deltares.subversion.model.RepositoryFolder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>worldRead</column-name><column-value><![CDATA[");
		sb.append(getWorldRead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>worldWrite</column-name><column-value><![CDATA[");
		sb.append(getWorldWrite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RepositoryFolder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RepositoryFolder.class
		};
	private long _folderId;
	private long _repositoryId;
	private long _originalRepositoryId;
	private boolean _setOriginalRepositoryId;
	private String _name;
	private boolean _worldRead;
	private boolean _worldWrite;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private RepositoryFolder _escapedModel;
}